// Human readable grammar. Easier to understand than actual rewrite rules.
// This file was generated using regenerate_bnf_like_grammar_file().
// A unit test should make sure this file is up to date with its source.

// The root symbol is FILE.

BEGIN = "begin"

BOOLEAN_LITERAL = ("true" | "false")

BRANCH = IF (WHITESPACE FUNCTION_BODY)? WHITESPACE (ELSE (WHITESPACE FUNCTION_BODY)? WHITESPACE)? END

ELSE = "else"

END = "end"

FILE = (WHITESPACE)? (FUNCTION_DEFINITION WHITESPACE)+ (WHITESPACE)?

FN = "fn"

FUNCTION_BODY = FUNCTION_BODY_ITEM (WHITESPACE FUNCTION_BODY_ITEM)*

FUNCTION_BODY_ITEM = (BRANCH | LOOP | OPERATOR | IDENTIFIER | LITERAL)

FUNCTION_DEFINITION = FN WHITESPACE (IDENTIFIER WHITESPACE)+ BEGIN WHITESPACE (FUNCTION_BODY WHITESPACE)? END

IDENTIFIER = regex("[a-z_]+")

IF = "if"

INTEGER_LITERAL = regex("[0-9]+")

LITERAL = (BOOLEAN_LITERAL | INTEGER_LITERAL | STRING_LITERAL)

LOOP = WHILE WHITESPACE (FUNCTION_BODY WHITESPACE)? END

OPERATOR = ("-" | "!=" | "." | "*" | "/" | "\n" | "%" | "+" | "<" | "<=" | "=" | ">" | ">=" | "and" | "drop" | "dup" | "not" | "or" | "over" | "rot" | "strlen" | "substr" | "swap")

STRING_LITERAL = regex("\\"([^\\\\]|\\\\(\\"|n|\\\\))*?\\"")

WHILE = "while"

WHITESPACE = regex("([ \\n]|$)+")
